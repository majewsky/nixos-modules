# This module configures an XMPP server using Prosody.
# REPLACES hologram-bethselamin-prosody
{ config, pkgs, lib, ... }:

with lib;

let

  cfg = config.my.services.prosody;

in {

  options.my.services.prosody = {
    # The `domainName` option is the only required configuration option (we
    # need a domain name for getting a TLS cert with ACME), so it takes the
    # role of `enable`.
    domainName = mkOption {
      default = null;
      description = "domain name for the Prosody server for XMPP (must be given to enable the service)";
      type = types.nullOr types.str;
    };
  };

  config = mkIf (cfg.domainName != null) {

    nixpkgs.config.allowBroken = config.system.stateVersion == "20.03"; # TODO: luaexpat is marked as broken, but required by Prosody

    networking.firewall.allowedTCPPorts = [ 5222 5269 ]; # xmpp-client and xmpp-server

    services.prosody = {
      admins = [ "stefan@${cfg.domainName}" ];
      enable = true;
      c2sRequireEncryption = true;
      s2sRequireEncryption = true;
      s2sSecureAuth = true;
      virtualHosts.${cfg.domainName} = {
        domain = cfg.domainName;
        enabled = true;
        ssl.cert = "/var/lib/prosody/tls.crt";
        ssl.key = "/var/lib/prosody/tls.key";
      };
      extraConfig = ''
        authentication = "internal_hashed";
      '';
    };

    # to get an ACME cert, we need to add a dummy vhost to the nginx config
    services.nginx.virtualHosts.${cfg.domainName} = mkDefault {
      forceSSL = true;
      enableACME = true;
      locations."/".extraConfig = ''
        deny all;
        return 404;
      '';
    };
    # prosody.service runs with limited privileges and cannot access the TLS
    # certs generated by ACME unless we copy them into place as root beforehand
    security.acme.certs.${cfg.domainName}.postRun = concatStringsSep " && " [
      "${pkgs.coreutils}/bin/install -D -m 0700 -o prosody -g prosody /var/lib/acme/${cfg.domainName}/fullchain.pem /var/lib/prosody/tls.crt"
      "${pkgs.coreutils}/bin/install -D -m 0700 -o prosody -g prosody /var/lib/acme/${cfg.domainName}/key.pem /var/lib/prosody/tls.key"
      "systemctl restart prosody.service"
    ];

  };

}
